Bradley Mont

Homework: Learning to use Emacs

Exercise 1.1: Moving Around in Emacs

1. e m a c s SP e x e r 1 . h t m l Enter

2. C-s H T M L Enter

3. C-s s c a v e n g e r Enter M-b

4. C-s s e l f - r e f e r e n t i a l Enter M-b M-b

5. C-s a r r o w Enter M-b

6. C-e

7. C-a

8. Yes, I used the emacs command [C-a] to move to the beginning of the current line and [C-e] to move to the end of the current line.

9. No, I did not move the cursor using the arrow keys.

10. C-x C-c


Exercise 1.2: Deleting text in Emacs

1. e m a c s SP e x e r 2 . h t m l Enter

2. M-g g 1 8 Enter C-k

3. C-s D E Enter C-a C-k

4. C-s w i k i p C-s Enter M-h C-w

5. C-s < ! Enter C-b C-b M-z > C-n C-a M-g g 3 8 6 Enter C-e C-w C-s < ! C-a C-k


Exercise 1.3: Inserting text in Emacs

1. e m a c s SP e x e r 3 . h t m l Enter

2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 Enter SP SP Enter

3. M-< M-% U T F - 8 Enter U S - A S C I I Enter SP Enter

4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a C-k

5. C-s < / o l > C-o

6. C-x C-s C-x C-c d i f f SP - u SP e x e r 1 . h t m l SP e x e r 3 . h t m l SP > e x e r 3 . d i f f Enter


Exercise 1.4: Other editing tasks in Emacs

1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l Enter

2. e m a c s SP e x e r 4 . h t m l Enter

3. 
(comment after html end tag)
M-> C-r < ! C-a C-f C-SP C-e M-w C-r < / h t m l > C-r C-n C-y Enter

4. 
(both comments after "should output nothing")
M-> C-r s h o u l d C-r C-a C-f C-SP M-e M-e M-e C-p M-w C-r s h o u l d SP o u t p u t SP n o t h i n g C-r C-n C-y M-{ C-n C-f DEL C-p C-p C-k DEL C-n C-n C-n C-f DEL C-n C-f DEL C-n C-f DEL

(You can learn more)
M-> C-r < ! C-r C-r C-r C-a C-f C-SP M-e C-n M-w C-r < h 2 > S u b m i t C-r C-n Enter C-y Enter C-p DEL C-p C-f DEL 

(DELETE ME)
M-> C-r D E L E T E C-a C-f C-SP C-e M-w C-r < h 2 > H o m e w o r k C-r C-n C-n C-y

(chinese)
M-> C-r < ! - - SP d i f f C-a C-f C-SP C-e M-w C-r < h 2 > L a b C-r C-n C-n C-y

5. C-s - - - SP e x e r 1 C-a C-SP M-> C-w 

6. C-x u

7. - - > C-r - - - SP e x e r 1 C-a < ! - - SP M-% < ! - - Enter s t a r t C o m m e n t Enter SP SP SP SP SP SP C-r - - - SP e x e r 1 C-a M-% - - > Enter e n d C o m m e n t Enter SP SP SP SP SP SP Enter 

8. M-< M-% < o l > Enter < o L > Enter ! 
(I found 7 instances of <ol>)

9. d i f f SP - u SP e x e r 1 . h t m l SP e x e r 4 . h t m l SP > e x e r 4 . d i f f Enter


Exercise 1.5: Doing commands in Emacs

1. M-x m - d i r Enter j u n k Enter

2. C-x C-f j u n k / h e l l o . c Enter [insert C code from assignment description]

3. M-x c o m p i l e Enter M-0 C-k g c c SP h e l l o . c SP - o SP h e l l o Enter y

4. C-x b h e l l o - o u t  Enter C-u M-! . / h e l l o Enter

5. 
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c\
';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  r\
eturn 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

Key strokes:
C-SP M-> M-w C-x C-f M-0 C-k ~ / k e y 1 . t x t Enter M-> C-y


Exercise 1.6: Running Elisp code

1. C-x b Enter

2. ( r a n d o m SP " 8 0 4 - 9 9 3 - 0 3 0 " ) C-j
My result: -251937246028872141

3. ( s e t q SP x SP ( r a n d o m ) ) C-j
   ( s e t q SP y SP ( r a n d o m ) ) C-j

4. ( * SP x SP y ) C-j

x = -842174711085438760, y = 2134725473962028496, and their product = 2286514348134049664. The result is incorrect. This means that some overflow must have occurred. 

5. M-: ( * SP x SP y ) Enter
The result is the same. However, it also outputs the octodecimal and hexadecimal notations of the number: "2286514348134049664 (#o176732512754627223600, #x1fbb54af665d2780)"

6. In the mathematical sense, the two random integers are not truly random because a truly random number has the possibility of having any value from negative infinity to positive infinity. However, due to restrictions such as memory, computers only generate numbers within a finite range, which means that they are not truly random. Additionally, computers use a seed value and an algorithm to generate what seems to be a random number; in reality, this number is actually predictable given the algorithm, so these integers can be considered psuedo-random, but not random.

7. Assuming (random) is truly random, the probability that the two-variable product mentioned above is mathematically incorrect is close to 100%. If (random) is truly random, then a random integer can have any value ranging from negative infinity to positive infinity. As a result, if you randomly pick two numbers, their product will almost always be a mathematically incorrect answer due to overflow. 