Bradley Mont
CS 35L Lab 8, Rahul Dhavalikar
Assignment 6. Multithreaded performance
Laboratory - Multithreaded Sort

1. Command: [echo $PATH]
We run this command to ensure that we have /usr/local/cs/bin prepended to our path, which we do.

2. Command: [sort --version]
We run this command to ensure that we are using an updated version of the GNU sort command
that supports multithreading. We see that we have version 8.30 of the sort command.

3. Command: [od -An -t fF -N $((2**24)) < /dev/urandom | tr -s [:blank:] '\n' | sed '/^$/d' > lab6.txt]
This command generates a file containing 2^24 random single-precision floating point numbers, 
in textual form, one per line with no white space.
We accomplish this using the od command with /dev/urandom as the standard input. 
The "-t fF" option sets the output format as floating point.
The "-An" option outputs the format for file offsets as None.
The "-N $((2**24))" option sets the number of bytes to 2^24.
The tr command replaces all blank space with new lines and then squeezes the output to avoid repetition 
of the same line.
The sed command deletes any blank lines.
We pipe the output to the file, lab6.txt.

4. Command: [time -p sort -g lab6.txt > /dev/null]
Now, we use time -p to time the command sort -g on that data, with the output sent to /dev/null.
We get the following output:
real 17.22
user 91.24
sys 0.26

Now, we invoke sort with the --parallel option as well as the -g option, 
and run our benchmark with 1, 2, 4, and 8 threads, in each case recording the real, user, and system time.

5. Command: [time -p sort -g --parallel=1 lab6.txt > /dev/null]
We run the sort command using 1 thread.
We get the following output:
real 76.54
user 76.42
sys 0.11

6. Command: [time -p sort -g --parallel=2 lab6.txt > /dev/null]
We run the sort command using 2 threads.
We get the following output:
real 36.11
user 68.90
sys 0.12

7. Command: [time -p sort -g --parallel=4 lab6.txt > /dev/null]
We run the sort command using 4 threads.
We get the following output:
real 27.72
user 92.01
sys 0.21

8. Command: [time -p sort -g --parallel=8 lab6.txt > /dev/null]
We run the sort command using 8 threads.
We get the following output:
real 15.57
user 85.04
sys 0.23

We see that the real time of the system gets faster as we increase the number of threads.
Therefore, when we use multithreading and execute more commands currently, we increase 
the speed and overall performance of our program. 
Also, we see that the running time for the sort command with no parallel options given 
is very similar to the running time for the sort command with 8 threads. This could mean
that version 8.30 of the sort command uses multithreading (8 threads specifically) to
achieve an optimal performance. 